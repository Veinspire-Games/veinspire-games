---
import s from "../styles/projects-grid.module.scss";
import type { Project } from "../projects/projectData.ts";

type GridItem = { Comp: any; data: Project };
export interface Props { items: GridItem[]; title?: string; }

const { items = [], title = "Projects" } = Astro.props;
---
<section id="pgSection" class={s.grid} aria-label={title}>
  {title && <h2 class={s.heading}>{title}</h2>}

  <ul class={s.list} role="list">
    {items.map(({ data }, i) => (
      <li class={s.item} role="listitem">
        <button
          class={s.tile}
          type="button"
          data-idx={i}
          aria-label={`Open ${data.title}`}
          onclick="window.__pgOpenFrom(this)"
        >
          <img class={s.img} src={data.image} alt="" loading="lazy" decoding="async" />
          <div class={s.scrim} aria-hidden="true"></div>

          <div class={s.caption}>
            <h3 class={s.title}>{data.title}</h3>
            <p class={s.short}>{data.short}</p>
          </div>

          <div class={s.tileFab} aria-hidden="true">↗</div>

          <!-- невидимые данные для оверлея -->
          <div class={s.meta} aria-hidden="true">
            <span data-title>{data.title}</span>
            <span data-short>{data.short}</span>
            {data.releaseDate ? <span data-release>{data.releaseDate}</span> : null}
            {data.trailerUrl ? <span data-trailer>{data.trailerUrl}</span> : null}
            {data.projectWebsiteUrl ? <span data-site>{data.projectWebsiteUrl}</span> : null}
            {data.details?.length ? <ul data-details>{data.details.map(d => <li>{d}</li>)}</ul> : null}
            {data.basics?.length ? <ul data-basics>{data.basics.map(b => <li>{b}</li>)}</ul> : null}
            {data.client?.length ? <ul data-client>{data.client.map(b => <li>{b}</li>)}</ul> : null}
          </div>
        </button>
      </li>
    ))}
  </ul>

  <!-- Overlay (под хедером) -->
  <div id="pgOverlay" class={`${s.overlay} pg-overlay-force`} hidden>
    <div class={s.bgWrap} aria-hidden="true">
      <img id="pgBg" class={s.bgImg} alt="" />
      <div class={s.bgVignette}></div>
    </div>

    <aside class={s.sheet} aria-live="polite">
      <h2 id="pgTitle" class={s.sheetTitle}></h2>

      <section class={s.group}>
        <h3 class={s.groupTitle}>PROJECT SCOPE</h3>
        <ul id="pgDetails" class={s.bullets}></ul>
      </section>

      <section class={s.group}>
        <h3 class={s.groupTitle}>TECH INFORMATION</h3>
        <ul id="pgBasics" class={s.bullets}></ul>
      </section>

      <section class={s.group}>
        <h3 class={s.groupTitle}>CLIENT</h3>
        <ul id="pgclient" class={s.bullets}></ul>
      </section>

      <section class={s.group} id="pgReleaseBlock" hidden>
        <h3 class={s.groupTitle}>RELEASE</h3>
        <div id="pgReleaseVal" class={s.releaseVal}></div>
      </section>

      <section class={s.group} id="pgTrailerBlock" hidden>
        <h3 class={s.groupTitle}>TRAILER</h3>
        <a id="pgTrailer" class={s.btnBrand} target="_blank" rel="noopener">Watch trailer</a>
      </section>

      <div class={s.actions}>
        <a id="pgPrimary" class={s.btnBrand} target="_blank" rel="noopener">VISIT PROJECT WEBSITE</a>
      </div>
    </aside>

    <button id="pgClose" class={s.closeFab} type="button" aria-label="Close">✕</button>
  </div>
</section>

<script is:inline>
(function () {
  function ready(fn){ if (document.readyState!=='loading') fn(); else document.addEventListener('DOMContentLoaded', fn); }

  ready(function(){
    var root     = document.getElementById('pgOverlay');
    var bgImg    = document.getElementById('pgBg');
    var titleEl  = document.getElementById('pgTitle');
    var detailsEl= document.getElementById('pgDetails');
    var basicsEl = document.getElementById('pgBasics');
    var clientEl  = document.getElementById('pgclient');
    var releaseBlock = document.getElementById('pgReleaseBlock');
    var releaseVal   = document.getElementById('pgReleaseVal');
    var primary  = document.getElementById('pgPrimary');
    var trailerA = document.getElementById('pgTrailer');
    var trailerBlock = document.getElementById('pgTrailerBlock');
    var closeBtn = document.getElementById('pgClose');

    var header, headerPinned = false;

    // глобальные стили для пина хедера и оверлея
    (function inject(){
      if (document.getElementById('pgOverlayStyle')) return;
      var st = document.createElement('style');
      st.id = 'pgOverlayStyle';
      st.textContent = `
        .pg-overlay-force{position:fixed!important;left:0!important;right:0!important;z-index:2147483647!important;width:100vw!important;background:#000;}
        .pg-header-pin{
          position:fixed!important; top:0; left:0; right:0;
          z-index:2147483648!important;
          height:var(--pg-header-height,64px);
          background:var(--pg-header-bg,rgba(18,18,18,.95));
          backdrop-filter:saturate(1.1) blur(6px);
          -webkit-backdrop-filter:saturate(1.1) blur(6px);
          transform:translateZ(0);
        }
      `;
      document.head.appendChild(st);
    })();

    function getHeader(){
      return document.getElementById('site-header') || document.querySelector('header');
    }

    function measureHeaderHeight(){
      header = header || getHeader();
      if (!header) return 0;
      var r = header.getBoundingClientRect();
      var h = Math.round(r.height || header.offsetHeight || 0) || 64;
      return h;
    }

    function pinHeader(){
      header = header || getHeader();
      if (!header) return 0;
      var h = measureHeaderHeight();
      header.style.setProperty('--pg-header-height', h + 'px');
      if (!header.classList.contains('pg-header-pin')) header.classList.add('pg-header-pin');
      headerPinned = true;
      return h;
    }

    function unpinHeader(){
      if (header && headerPinned){
        header.classList.remove('pg-header-pin');
        header.style.removeProperty('--pg-header-height');
        headerPinned = false;
      }
    }

    function fitBelowHeader(){
      if (!root) return;
      var h = measureHeaderHeight();
      // если закрепили — берём из переменной (точно соответствует высоте)
      var cssH = (header && getComputedStyle(header).getPropertyValue('--pg-header-height')) || '';
      if (cssH) { h = parseInt(cssH, 10) || h; }
      root.style.top = h + 'px';
      root.style.height = 'calc(100vh - ' + h + 'px)';
    }

    function fillList(ul, arr){
      if (!ul) return;
      ul.innerHTML='';
      if (!arr||!arr.length) return;
      for (var i=0;i<arr.length;i++){ var li=document.createElement('li'); li.textContent=arr[i]; ul.appendChild(li); }
    }

    function openFromButton(btn){
      if (!btn || !root || !bgImg || !titleEl) return;

      // 1) жёстко фиксируем хедер с его текущей высотой
      var pinnedH = pinHeader();

      // 2) позиционируем оверлей ровно под ним
      fitBelowHeader();

      // 3) читаем данные
      var title   = (btn.querySelector('[data-title]')   || {}).textContent || '';
      var image   = (btn.querySelector('img')            || {}).src || '';
      var rel     = (btn.querySelector('[data-release]') || {}).textContent || '';
      var trailer = (btn.querySelector('[data-trailer]') || {}).textContent || '';
      var site    = (btn.querySelector('[data-site]')    || {}).textContent || '';
      var details = Array.from(btn.querySelectorAll('[data-details] li')).map(li=>li.textContent||'');
      var basics  = Array.from(btn.querySelectorAll('[data-basics] li')).map(li=>li.textContent||'');
      var client  = Array.from(btn.querySelectorAll('[data-client] li')).map(li=>li.textContent||'');

      // 4) наполнение
      bgImg.setAttribute('src', image);
      titleEl.textContent = title;
      fillList(detailsEl, details);
      fillList(basicsEl, basics);
      fillList(clientEl, client);

      if (rel){ releaseVal.textContent = rel; releaseBlock.hidden = false; }
      else { releaseVal.textContent=''; releaseBlock.hidden = true; }

      if (trailer){ trailerA.setAttribute('href', trailer); trailerBlock.hidden=false; }
      else { trailerA.removeAttribute('href'); trailerBlock.hidden=true; }

      if (site){ primary.style.display=''; primary.setAttribute('href', site); }
      else { primary.style.display='none'; primary.removeAttribute('href'); }

      // 5) показать оверлей
      root.removeAttribute('hidden');
      root.style.display='block';
      root.setAttribute('aria-hidden','false');
      requestAnimationFrame(()=>root.classList.add('open'));

      // запрет скролла основного контента
      document.documentElement.style.overflow='hidden';
      document.body.style.overflow='hidden';

      // пересчёты (если, например, responsive-хедер меняет высоту на ресайзе)
      window.addEventListener('resize', fitBelowHeader, {passive:true});
    }

    function closeOverlay(){
      if (!root) return;
      root.classList.remove('open');
      root.setAttribute('hidden','');
      root.style.display='none';
      root.setAttribute('aria-hidden','true');

      unpinHeader();
      document.documentElement.style.overflow='';
      document.body.style.overflow='';

      window.removeEventListener('resize', fitBelowHeader);
    }

    // наружу
    window.__pgOpenFrom = openFromButton;

    // делегирование клика (на всю секцию)
    var section = document.getElementById('pgSection');
    if (section) {
      section.addEventListener('click', function(e){
        var t = e.target; if (!t||!t.closest) return;
        var btn = t.closest('[data-idx]'); if (btn) openFromButton(btn);
      });
    }

    if (closeBtn) closeBtn.addEventListener('click', closeOverlay);
    document.addEventListener('keydown', function(e){ if (e.key==='Escape') closeOverlay(); });
    if (root) root.addEventListener('click', function(e){ if (e.target===root) closeOverlay(); });
  });
})();
</script>

