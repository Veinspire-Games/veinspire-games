---
import BaseLayout from "@layouts/BaseLayout.astro";
export interface SectionLink{ id:string; label:string }
export interface Props{ title:string; intro?:string; sections?:SectionLink[] }
const { title, intro="", sections=[] } = Astro.props;
---
<BaseLayout title={`${title} — Veinspire Solutions`} description={intro}>
  <section class="section">
    <div class="container">
      <h1>{title}</h1>
      {intro && <p style="max-width:820px;color:var(--ink-200)">{intro}</p>}
      {sections.length>0 && (
        <nav class="sticky-subnav" id="subnav">
          {sections.map(s=><a href={`#${s.id}`}>{s.label}</a>)}
        </nav>
      )}
    </div>
  </section>
  <slot />
</BaseLayout>

<script>
  // Подсветка активной секции (без TS-аннотаций — работает везде)
  const links = Array.from(document.querySelectorAll('#subnav a'));
  const hrefs = links.map(a => a.getAttribute('href') || '');
  const ids = hrefs.filter(Boolean).map(h => h.replace('#', ''));

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((e) => {
      const id = e.target.getAttribute('id');
      if (!id) return;

      const link = links.find(a => a.getAttribute('href') === `#${id}`);
      if (!link) return;

      if (e.isIntersecting) {
        links.forEach(l => l.classList.remove('is-active'));
        link.classList.add('is-active');
      }
    });
  }, { rootMargin: '-40% 0px -55% 0px', threshold: 0 });

  ids.forEach((id) => {
    const el = document.getElementById(id);
    if (el) observer.observe(el);
  });
</script>
